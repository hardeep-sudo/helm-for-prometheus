{{- if .Values.server.enabled }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: server
  namespace: {{ .Values.namespace }}
spec:
  serviceName: server-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      name: server
  template:
    metadata:
      labels:
        component: server
        instance: prometheus-dev
        managed-by: release-tool
        name: server
        part-of: prometheus
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: name
                  operator: In
                  values:
                  - server
              topologyKey: kubernetes.io/hostname
            weight: 1
      securityContext:
        runAsUser: 10000
        runAsGroup: 20000
        runAsNonRoot: true
      containers:
      - name: server
        image: {{ .Values.server.imageTag }}
        imagePullPolicy: IfNotPresent
        args:
        - --config.file=/etc/config/prometheus.json
        - --storage.tsdb.path=/data
        - --web.console.libraries=/usr/share/prometheus/console_libraries
        - --web.console.templates=/usr/share/prometheus/consoles
        - --web.enable-lifecycle
        - --web.external-url=https://prometheus-dev.dev.example.io
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /-/healthy
            port: server
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        name: server
        ports:
        - containerPort: 9090
          name: server
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /-/ready
            port: server
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        resources:
        {{- with .Values.server.resources }}
          {{- toYaml . | nindent 10 }}
        {{ end }}
        volumeMounts:
        - mountPath: /etc/config
          name: server-config
        - mountPath: /data
          name: storage-volume
      - args:
        - --volume-dir=/etc/config
        - --webhook-url=http://127.0.0.1:9090/-/reload
        image: {{ .Values.server_configmap_reloader.imageTag }}
        imagePullPolicy: IfNotPresent
        name: server-configmap-reloader
        resources:
        {{- with .Values.server_configmap_reloader.resources }}
          {{- toYaml . | nindent 10 }}
        {{ end }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/config
          name: server-config
          readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 20000
        runAsNonRoot: true
        runAsUser: 10000
      serviceAccount: server
      serviceAccountName: server
      terminationGracePeriodSeconds: 300
      volumes:
      - configMap:
          defaultMode: 420
          name: server
        name: server-config
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      name: storage-volume
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      storageClassName: ssd
      volumeMode: Filesystem
{{- end }}
